{"version":3,"file":"static/js/402.5eff4c25.chunk.js","mappings":"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","sources":["webpack://react-homework-template/./src/components/modal/Modal.module.css?5a53","../node_modules/nanoid/index.browser.js","webpack://react-homework-template/./src/components/Forms/Form.module.css?d6a1","components/Forms/FormUpdate.jsx","components/modal/Modal.jsx","webpack://react-homework-template/./src/components/ContactListItem/ContactListItem.module.css?7127","components/ContactListItem/ContactListItem.jsx","webpack://react-homework-template/./src/components/ContactList/ContactList.module.css?1ce0","components/ContactList/ContactList.jsx","webpack://react-homework-template/./src/components/Filter/Filter.module.css?fad1","components/Filter/Filter.jsx","components/Forms/FormAdd.jsx","webpack://react-homework-template/./src/components/Sections/ContactsSection/ContactsSection.module.css?8786","components/Sections/ContactsSection/ContactsSection.jsx","pages/ContactsPage.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"overlay\":\"Modal_overlay__baCSF\",\"modal\":\"Modal_modal__EqaZW\",\"image\":\"Modal_image__2yF-K\"};","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"Form_form__U6AKY\",\"inputLable\":\"Form_inputLable__v-aCi\",\"inputField\":\"Form_inputField__6v0hi\",\"submitBtn\":\"Form_submitBtn__Bxicd\"};","import { useDispatch, useSelector } from 'react-redux';\nimport { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { nanoid } from 'nanoid';\n\nimport { getContacts } from 'redux/contactsSlice';\nimport { updateContact } from 'redux/operations';\nimport css from './Form.module.css';\n\nexport const FormUpdate = ({\n  initialName = '',\n  initialNumber = '',\n  id,\n  closeModal,\n}) => {\n  const [name, setName] = useState(initialName);\n  const [number, setNumber] = useState(initialNumber);\n\n  const inputNameId = nanoid();\n  const inputTelId = nanoid();\n  const dispatch = useDispatch();\n  const contacts = useSelector(getContacts);\n\n  const handleInputChange = e => {\n    switch (e.target.name) {\n      case 'name':\n        setName(e.target.value);\n        break;\n      case 'number':\n        setNumber(e.target.value);\n        break;\n      default:\n        console.log('Something wrong');\n    }\n  };\n\n  const isInList = name =>\n    contacts.some(contact => contact.name.toLowerCase() === name.toLowerCase());\n\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    if (isInList(name)) {\n      alert(`${name} is already in your contacts`);\n      return;\n    }\n    const contact = {\n      id,\n      user: { name, number },\n    };\n    dispatch(updateContact(contact));\n    closeModal();\n    setName('');\n    setNumber('');\n  };\n\n  return (\n    <form className={css.form} onSubmit={handleSubmit}>\n      <label htmlFor={inputNameId} className={css.inputLable}>\n        Name\n      </label>\n      <input\n        id={inputNameId}\n        className={css.inputField}\n        type=\"text\"\n        name=\"name\"\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' \\-][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n        title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n        required\n        onChange={handleInputChange}\n        value={name}\n      />\n      <label htmlFor={inputTelId} className={css.inputLable}>\n        Number\n      </label>\n      <input\n        id={inputTelId}\n        type=\"tel\"\n        className={css.inputField}\n        name=\"number\"\n        pattern=\"\\+?\\d{1,4}?[ .\\-\\s]?\\(?\\d{1,3}?\\)?[ .\\-\\s]?\\d{1,4}[ .\\-\\s]?\\d{1,4}[ .\\-\\s]?\\d{1,9}\"\n        title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n        required\n        value={number}\n        onChange={handleInputChange}\n      />\n      <button type=\"submit\" className={css.submitBtn}>\n        Update contact\n      </button>\n    </form>\n  );\n};\n\nFormUpdate.propTypes = {\n  addContact: PropTypes.func,\n  isInList: PropTypes.func,\n};\n","import { useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport css from './Modal.module.css';\nimport { FormUpdate } from 'components/Forms/FormUpdate';\n\nconst Modal = ({ closeModal, initialName, initialNumber, id }) => {\n  useEffect(() => {\n    const handlePressEsc = e => {\n      if (e.key === 'Escape') closeModal();\n    };\n    window.addEventListener('keydown', handlePressEsc);\n    return () => {\n      window.removeEventListener('keydown', handlePressEsc);\n    };\n  }, [closeModal]);\n\n  const handleOverlayClick = e => {\n    if (e.currentTarget === e.target) closeModal();\n  };\n\n  return (\n    <div className={css.overlay} onClick={handleOverlayClick}>\n      <FormUpdate\n        textBtn=\"Update contact\"\n        className={css.modal}\n        initialName={initialName}\n        initialNumber={initialNumber}\n        closeModal={closeModal}\n        id={id}\n      />\n    </div>\n  );\n};\n\nModal.propTypes = {\n  alt: PropTypes.string,\n  closeModal: PropTypes.func,\n  largeImage: PropTypes.string,\n};\n\nexport default Modal;\n","// extracted by mini-css-extract-plugin\nexport default {\"contactsItem\":\"ContactListItem_contactsItem__Jxkos\",\"contactInfo\":\"ContactListItem_contactInfo__NkIrP\",\"deleteBtn\":\"ContactListItem_deleteBtn__roUYm\",\"updateBtn\":\"ContactListItem_updateBtn__sTRXQ\",\"contactName\":\"ContactListItem_contactName__kCRjB\"};","import Modal from 'components/modal/Modal';\nimport PropTypes from 'prop-types';\nimport { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { deleteContact } from 'redux/operations';\nimport css from './ContactListItem.module.css';\n\nexport const ContactListItem = ({ name, number, id, deletingContactId }) => {\n  const dispatch = useDispatch();\n  const [showModal, setShowModal] = useState(false);\n  const openModal = () => {\n    setShowModal(true);\n  };\n\n  const closeModal = () => {\n    setShowModal(false);\n  };\n\n  return (\n    <li className={css.contactsItem}>\n      <p className={css.contactInfo}>\n        <span className={css.contactName}>{name}</span>: {number}\n      </p>\n      <div className={css.buttonBlock}>\n        {' '}\n        <button type=\"button\" className={css.updateBtn} onClick={openModal}>\n          Update\n        </button>\n        <button\n          disabled={deletingContactId === id}\n          type=\"button\"\n          className={css.deleteBtn}\n          onClick={() => dispatch(deleteContact(id))}\n        >\n          Delete\n        </button>\n      </div>\n\n      {showModal && (\n        <Modal\n          closeModal={closeModal}\n          initialName={name}\n          initialNumber={number}\n          id={id}\n        />\n      )}\n    </li>\n  );\n};\n\nContactListItem.propTypes = {\n  deleteHandle: PropTypes.func,\n  number: PropTypes.string,\n  name: PropTypes.string,\n  contactId: PropTypes.string,\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"list\":\"ContactList_list__csErn\"};","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport PropTypes from 'prop-types';\n\nimport { ContactListItem } from 'components/ContactListItem/ContactListItem';\n\nimport {\n  getContacts,\n  getError,\n  getIsLoading,\n  selectDeletingContactId,\n} from 'redux/contactsSlice';\nimport { getFilter } from 'redux/filterSlice';\nimport { fetchContacts } from 'redux/operations';\nimport { useAuth } from 'hooks/useAuth';\n\nimport css from './ContactList.module.css'\n\nexport const ContactList = () => {\n  const contacts = useSelector(getContacts);\n  const filter = useSelector(getFilter);\n  const error = useSelector(getError);\n  const isLoading = useSelector(getIsLoading);\n  const deletingContactId = useSelector(selectDeletingContactId);\n\n  const dispatch = useDispatch();\n  const { isLoggedIn } = useAuth();\n  const getVisibleContacts = () =>\n    contacts.filter(contact =>\n      contact.name.toLowerCase().includes(filter.toLowerCase())\n    );\n\n  useEffect(() => {\n    if (!isLoggedIn) return;\n    dispatch(fetchContacts());\n  }, [dispatch, isLoggedIn]);\n\n  const visibleContacts = getVisibleContacts();\n\n  return (\n    <ul className={css.list}>\n      {isLoading && <div>Is loading...</div>}\n      {error && <div>Something go wrong:( Please, try letter</div>}\n      {visibleContacts?.map(contact => {\n        return (\n          <ContactListItem\n            key={contact.name}\n            deletingContactId={deletingContactId}\n            {...contact}\n          />\n        );\n      })}\n    </ul>\n  );\n};\n\nContactList.propTypes = {\n  deleteHandle: PropTypes.func,\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string,\n      name: PropTypes.string,\n      number: PropTypes.number,\n    })\n  ),\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"Filter_container__L5eml\",\"inputFilter\":\"Filter_inputFilter__8QMOp\",\"lableFilter\":\"Filter_lableFilter__73gJe\"};","import { useDispatch, useSelector } from 'react-redux';\nimport { nanoid } from 'nanoid';\nimport PropTypes from 'prop-types';\n\nimport { changeFilter, getFilter } from 'redux/filterSlice';\nimport css from './Filter.module.css';\n\nexport const Filter = () => {\n  const inputFilterId = nanoid();\n  const filterValue = useSelector(getFilter);\n  const dispatch = useDispatch();\n  const change = e => dispatch(changeFilter(e.target.value));\n\n  return (\n    <div className={css.container}>\n      <label htmlFor={inputFilterId} className={css.lableFilter}>\n        Find your contact\n      </label>\n      <input\n        className={css.inputFilter}\n        name=\"filter\"\n        value={filterValue}\n        onChange={change}\n        id={inputFilterId}\n      ></input>\n    </div>\n  );\n};\n\nFilter.propTypes = {\n  value: PropTypes.string,\n  onChange: PropTypes.func,\n};\n","import { useDispatch, useSelector } from 'react-redux';\nimport { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { nanoid } from 'nanoid';\n\nimport { getContacts } from 'redux/contactsSlice';\nimport { addContact } from 'redux/operations';\nimport css from './Form.module.css';\n\nexport const FormAdd = () => {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const inputNameId = nanoid();\n  const inputTelId = nanoid();\n  const dispatch = useDispatch();\n  const contacts = useSelector(getContacts);\n\n  const handleInputChange = e => {\n    switch (e.target.name) {\n      case 'name':\n        setName(e.target.value);\n        break;\n      case 'number':\n        setNumber(e.target.value);\n        break;\n      default:\n        console.log('Something wrong');\n    }\n  };\n\n  const isInList = name =>\n    contacts.some(contact => contact.name.toLowerCase() === name.toLowerCase());\n\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    if (isInList(name)) {\n      alert(`${name} is already in your contacts`);\n      return;\n    }\n    const contact = {\n      name,\n      number,\n      // phone: Number(number),\n    };\n    dispatch(addContact(contact));\n    setName('');\n    setNumber('');\n  };\n\n  return (\n    <form className={css.form} onSubmit={handleSubmit}>\n      <label htmlFor={inputNameId} className={css.inputLable}>\n        Name\n      </label>\n      <input\n        id={inputNameId}\n        className={css.inputField}\n        type=\"text\"\n        name=\"name\"\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' \\-][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n        title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n        required\n        onChange={handleInputChange}\n        value={name}\n      />\n      <label htmlFor={inputTelId} className={css.inputLable}>\n        Number\n      </label>\n      <input\n        id={inputTelId}\n        type=\"tel\"\n        className={css.inputField}\n        name=\"number\"\n        pattern=\"\\+?\\d{1,4}?[ .\\-\\s]?\\(?\\d{1,3}?\\)?[ .\\-\\s]?\\d{1,4}[ .\\-\\s]?\\d{1,4}[ .\\-\\s]?\\d{1,9}\"\n        title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n        required\n        value={number}\n        onChange={handleInputChange}\n      />\n      <button type=\"submit\" className={css.submitBtn}>\n        Add contact\n      </button>\n    </form>\n  );\n};\n\nFormAdd.propTypes = {\n  addContact: PropTypes.func,\n  isInList: PropTypes.func,\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"section\":\"ContactsSection_section__dw-YT\",\"title\":\"ContactsSection_title__ZwzOi\",\"container\":\"ContactsSection_container__Q23dN\",\"contactsBlock\":\"ContactsSection_contactsBlock__BVBhc\"};","import { ContactList } from 'components/ContactList/ContactList';\nimport { Filter } from 'components/Filter/Filter';\nimport { FormAdd } from 'components/Forms/FormAdd';\n\nimport css from './ContactsSection.module.css';\n\nconst ContactsSection = () => {\n  return (\n    <section className={css.section}>\n      <h1 className={css.title}>Phonebook</h1>\n      <h2 className={css.title}>Contacts</h2>\n      <div className={css.container}>\n        <div className={css.contactsBlock}>\n          <Filter name=\"filter\" />\n          <ContactList />\n        </div>      \n        <FormAdd className={css.addForm} textBtn=\"Add contact\" />\n       \n      </div>\n    </section>\n  );\n};\nexport default ContactsSection;\n","import ContactsSection from 'components/Sections/ContactsSection/ContactsSection';\n\nconst ContactsPage = () => {\n  return <ContactsSection />;\n};\n\nexport default ContactsPage;\n"],"names":["nanoid","size","crypto","getRandomValues","Uint8Array","reduce","id","byte","toString","toUpperCase","FormUpdate","initialName","initialNumber","closeModal","useState","name","setName","number","setNumber","inputNameId","inputTelId","dispatch","useDispatch","contacts","useSelector","getContacts","handleInputChange","e","target","value","console","log","className","css","onSubmit","preventDefault","some","contact","toLowerCase","isInList","alert","user","updateContact","htmlFor","type","pattern","title","required","onChange","useEffect","handlePressEsc","key","window","addEventListener","removeEventListener","onClick","currentTarget","textBtn","ContactListItem","deletingContactId","showModal","setShowModal","disabled","deleteContact","ContactList","filter","getFilter","error","getError","isLoading","getIsLoading","selectDeletingContactId","isLoggedIn","useAuth","fetchContacts","visibleContacts","includes","map","Filter","inputFilterId","filterValue","changeFilter","FormAdd","addContact"],"sourceRoot":""}